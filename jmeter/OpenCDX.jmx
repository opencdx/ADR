<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Setup Details" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Properties Details" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;Users: &quot; + ${__P(noThreads,1)} + &quot; Rampup: &quot; + ${__P(rampUp,1)});
System.out.println(&quot;Setup Users: &quot; + ${__P(noThreads,1)} + &quot; Rampup: &quot; + ${__P(rampUp,1)} + &quot; Server: &quot; + ${__P(serverName,localhost)} + &quot; Port: &quot; + ${__P(serverPort,8080)});</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Tests" enabled="true">
        <stringProp name="ThreadGroup.num_threads">${__P(noThreads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUp,0)}</stringProp>
        <stringProp name="ThreadGroup.duration">${__P(durationSec,60)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">${__P(lCount,1)}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Thread Setup" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.Date;
import java.util.Random;
import java.text.SimpleDateFormat;

// Set the start date (January 1, 2019)
SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
Date startDate = dateFormat.parse(&quot;2019-01-01&quot;);

// Get the current date
Date currentDate = new Date();

// Calculate the difference in milliseconds between the current date and the start date
long diffInMillies = currentDate.getTime() - startDate.getTime();

// Generate a random number of milliseconds within this range
Random random = new Random();
long randomMillisSinceEpoch = startDate.getTime() + (long)(random.nextDouble() * diffInMillies);

// Create a Date object with the random milliseconds
Date randomDate = new Date(randomMillisSinceEpoch);

// Get the epoch seconds for the random date as a double
double randomDateEpochSeconds = randomDate.getTime() / 1000.0;

// Store the random epoch seconds in a JMeter variable
vars.put(&quot;anfSubmissionDate&quot;, Double.toString(randomDateEpochSeconds));

String jMUUID = &quot;${__UUID}&quot;;
String anfId = &quot;${__UUID}&quot;;
int ageT = ${__Random(1,100)};
float heightT = ${__Random(54,84)};
float weightT = ${__Random(100,350)};
float bmiT = (weightT / (heightT * heightT)) * 703;

vars.put(&quot;nationalHealthID&quot;,jMUUID);
vars.put(&quot;anf_id&quot;,anfId);
vars.put(&quot;age&quot;,Integer.toString(ageT));
vars.put(&quot;height&quot;,Float.toString(heightT));
vars.put(&quot;weight&quot;,Float.toString(weightT));
vars.put(&quot;bmi&quot;,Float.toString(bmiT));</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(serverName,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(serverPort,8085)}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">2000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">2000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="423493009 | Age at diagnosis (observable entity)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;id&quot; : &quot;${anf_id}&quot;,&#xd;
   &quot;time&quot; : {&#xd;
     &quot;upperBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;lowerBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;includeUpperBound&quot; : true,&#xd;
     &quot;includeLowerBound&quot; : true,&#xd;
     &quot;semantic&quot; : {&#xd;
       &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
     },&#xd;
     &quot;resolution&quot; : 1.0&#xd;
   },&#xd;
   &quot;subjectOfRecord&quot; : {&#xd;
     &quot;id&quot; : &quot;${nationalHealthID}&quot;,&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
     }&#xd;
   },&#xd;
   &quot;authors&quot; : [ {&#xd;
     &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
     &quot;practitionerValue&quot; : {&#xd;
       &quot;identifier&quot; : &quot;123456&quot;,&#xd;
       &quot;display&quot; : &quot;Dr. John Doe&quot;,&#xd;
       &quot;reference&quot; : &quot;http://example.com&quot;,&#xd;
       &quot;uri&quot; : &quot;http://example.com&quot;&#xd;
     },&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
     }&#xd;
   } ],&#xd;
   &quot;subjectOfInformation&quot; : {&#xd;
     &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
   },&#xd;
   &quot;associatedStatement&quot; : [ ],&#xd;
   &quot;topic&quot; : {&#xd;
     &quot;expression&quot; : &quot;423493009 | Age at diagnosis (observable entity)&quot;&#xd;
   },&#xd;
   &quot;type&quot; : {&#xd;
     &quot;expression&quot; : &quot;423493009 | Age at diagnosis (observable entity)&quot;&#xd;
   },&#xd;
   &quot;performanceCircumstance&quot; : {&#xd;
     &quot;timing&quot; : {&#xd;
       &quot;upperBound&quot; : 1.721343492E9,&#xd;
       &quot;lowerBound&quot; : 1.721343492E9,&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;purpose&quot; : [ {&#xd;
       &quot;expression&quot; : &quot;386053000 | Evaluation procedure (procedure)&quot;&#xd;
     } ],&#xd;
     &quot;status&quot; : {&#xd;
       &quot;expression&quot; : &quot;441742003 | Evaluation finding (finding)&quot;&#xd;
     },&#xd;
     &quot;result&quot; : {&#xd;
       &quot;upperBound&quot; : ${age},&#xd;
       &quot;lowerBound&quot; : ${age},&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;258707000 | year (qualifier value)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;participant&quot; : [ {&#xd;
       &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
       &quot;code&quot; : {&#xd;
         &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
       }&#xd;
     } ]&#xd;
   },&#xd;
   &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;&#xd;
 }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/anf</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="60621009 | Body mass index (observable entity)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;id&quot; : &quot;${anf_id}&quot;,&#xd;
   &quot;time&quot; : {&#xd;
     &quot;upperBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;lowerBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;includeUpperBound&quot; : true,&#xd;
     &quot;includeLowerBound&quot; : true,&#xd;
     &quot;semantic&quot; : {&#xd;
       &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
     },&#xd;
     &quot;resolution&quot; : 1.0&#xd;
   },&#xd;
   &quot;subjectOfRecord&quot; : {&#xd;
     &quot;id&quot; : &quot;${nationalHealthID}&quot;,&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
     }&#xd;
   },&#xd;
   &quot;authors&quot; : [ {&#xd;
     &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
     &quot;practitionerValue&quot; : {&#xd;
       &quot;identifier&quot; : &quot;123456&quot;,&#xd;
       &quot;display&quot; : &quot;Dr. John Doe&quot;,&#xd;
       &quot;reference&quot; : &quot;http://example.com&quot;,&#xd;
       &quot;uri&quot; : &quot;http://example.com&quot;&#xd;
     },&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
     }&#xd;
   } ],&#xd;
   &quot;subjectOfInformation&quot; : {&#xd;
     &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
   },&#xd;
   &quot;associatedStatement&quot; : [ ],&#xd;
   &quot;topic&quot; : {&#xd;
     &quot;expression&quot; : &quot;60621009 | Body mass index (observable entity)&quot;&#xd;
   },&#xd;
   &quot;type&quot; : {&#xd;
     &quot;expression&quot; : &quot;60621009 | Body mass index (observable entity)&quot;&#xd;
   },&#xd;
   &quot;performanceCircumstance&quot; : {&#xd;
     &quot;timing&quot; : {&#xd;
       &quot;upperBound&quot; : 1.721343492E9,&#xd;
       &quot;lowerBound&quot; : 1.721343492E9,&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;purpose&quot; : [ {&#xd;
       &quot;expression&quot; : &quot;386053000 | Evaluation procedure (procedure)&quot;&#xd;
     } ],&#xd;
     &quot;status&quot; : {&#xd;
       &quot;expression&quot; : &quot;441742003 | Evaluation finding (finding)&quot;&#xd;
     },&#xd;
     &quot;result&quot; : {&#xd;
       &quot;upperBound&quot; : ${bmi},&#xd;
       &quot;lowerBound&quot; : ${bmi},&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;60621009 | Body mass index (observable entity)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;participant&quot; : [ {&#xd;
       &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
       &quot;code&quot; : {&#xd;
         &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
       }&#xd;
     } ]&#xd;
   },&#xd;
   &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;&#xd;
 }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/anf</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="27113001 | Body weight (observable entity)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;id&quot; : &quot;${anf_id}&quot;,&#xd;
   &quot;time&quot; : {&#xd;
     &quot;upperBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;lowerBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;includeUpperBound&quot; : true,&#xd;
     &quot;includeLowerBound&quot; : true,&#xd;
     &quot;semantic&quot; : {&#xd;
       &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
     },&#xd;
     &quot;resolution&quot; : 1.0&#xd;
   },&#xd;
   &quot;subjectOfRecord&quot; : {&#xd;
     &quot;id&quot; : &quot;${nationalHealthID}&quot;,&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
     }&#xd;
   },&#xd;
   &quot;authors&quot; : [ {&#xd;
     &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
     &quot;practitionerValue&quot; : {&#xd;
       &quot;identifier&quot; : &quot;123456&quot;,&#xd;
       &quot;display&quot; : &quot;Dr. John Doe&quot;,&#xd;
       &quot;reference&quot; : &quot;http://example.com&quot;,&#xd;
       &quot;uri&quot; : &quot;http://example.com&quot;&#xd;
     },&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
     }&#xd;
   } ],&#xd;
   &quot;subjectOfInformation&quot; : {&#xd;
     &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
   },&#xd;
   &quot;associatedStatement&quot; : [ ],&#xd;
   &quot;topic&quot; : {&#xd;
     &quot;expression&quot; : &quot;27113001 | Body weight (observable entity)&quot;&#xd;
   },&#xd;
   &quot;type&quot; : {&#xd;
     &quot;expression&quot; : &quot;27113001 | Body weight (observable entity)&quot;&#xd;
   },&#xd;
   &quot;performanceCircumstance&quot; : {&#xd;
     &quot;timing&quot; : {&#xd;
       &quot;upperBound&quot; : 1.721343492E9,&#xd;
       &quot;lowerBound&quot; : 1.721343492E9,&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;purpose&quot; : [ {&#xd;
       &quot;expression&quot; : &quot;386053000 | Evaluation procedure (procedure)&quot;&#xd;
     } ],&#xd;
     &quot;status&quot; : {&#xd;
       &quot;expression&quot; : &quot;441742003 | Evaluation finding (finding)&quot;&#xd;
     },&#xd;
     &quot;result&quot; : {&#xd;
       &quot;upperBound&quot; : ${weight},&#xd;
       &quot;lowerBound&quot; : ${weight},&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;258693003 | pounds (qualifier value)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;participant&quot; : [ {&#xd;
       &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
       &quot;code&quot; : {&#xd;
         &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
       }&#xd;
     } ]&#xd;
   },&#xd;
   &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;&#xd;
 }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/anf</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1153637007 | Body height (observable entity))" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;id&quot; : &quot;${anf_id}&quot;,&#xd;
   &quot;time&quot; : {&#xd;
     &quot;upperBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;lowerBound&quot; : ${anfSubmissionDate},&#xd;
     &quot;includeUpperBound&quot; : true,&#xd;
     &quot;includeLowerBound&quot; : true,&#xd;
     &quot;semantic&quot; : {&#xd;
       &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
     },&#xd;
     &quot;resolution&quot; : 1.0&#xd;
   },&#xd;
   &quot;subjectOfRecord&quot; : {&#xd;
     &quot;id&quot; : &quot;${nationalHealthID}&quot;,&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
     }&#xd;
   },&#xd;
   &quot;authors&quot; : [ {&#xd;
     &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
     &quot;practitionerValue&quot; : {&#xd;
       &quot;identifier&quot; : &quot;123456&quot;,&#xd;
       &quot;display&quot; : &quot;Dr. John Doe&quot;,&#xd;
       &quot;reference&quot; : &quot;http://example.com&quot;,&#xd;
       &quot;uri&quot; : &quot;http://example.com&quot;&#xd;
     },&#xd;
     &quot;code&quot; : {&#xd;
       &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
     }&#xd;
   } ],&#xd;
   &quot;subjectOfInformation&quot; : {&#xd;
     &quot;expression&quot; : &quot;116154003 | Patient (person)&quot;&#xd;
   },&#xd;
   &quot;associatedStatement&quot; : [ ],&#xd;
   &quot;topic&quot; : {&#xd;
     &quot;expression&quot; : &quot;1153637007 | Body height (observable entity)&quot;&#xd;
   },&#xd;
   &quot;type&quot; : {&#xd;
     &quot;expression&quot; : &quot;1153637007 | Body height (observable entity)&quot;&#xd;
   },&#xd;
   &quot;performanceCircumstance&quot; : {&#xd;
     &quot;timing&quot; : {&#xd;
       &quot;upperBound&quot; : 1.721343492E9,&#xd;
       &quot;lowerBound&quot; : 1.721343492E9,&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;257997001 | Seconds (qualifier value)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;purpose&quot; : [ {&#xd;
       &quot;expression&quot; : &quot;386053000 | Evaluation procedure (procedure)&quot;&#xd;
     } ],&#xd;
     &quot;status&quot; : {&#xd;
       &quot;expression&quot; : &quot;441742003 | Evaluation finding (finding)&quot;&#xd;
     },&#xd;
     &quot;result&quot; : {&#xd;
       &quot;upperBound&quot; : ${height},&#xd;
       &quot;lowerBound&quot; : ${height},&#xd;
       &quot;includeUpperBound&quot; : true,&#xd;
       &quot;includeLowerBound&quot; : true,&#xd;
       &quot;semantic&quot; : {&#xd;
         &quot;expression&quot; : &quot;258677007 | inch (qualifier value)&quot;&#xd;
       },&#xd;
       &quot;resolution&quot; : 1.0&#xd;
     },&#xd;
     &quot;participant&quot; : [ {&#xd;
       &quot;id&quot; : &quot;719cba66-ebe9-4588-a6c8-53b57c5cc6bf&quot;,&#xd;
       &quot;code&quot; : {&#xd;
         &quot;expression&quot; : &quot;62247001 | Family medicine specialist (occupation)&quot;&#xd;
       }&#xd;
     } ]&#xd;
   },&#xd;
   &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;&#xd;
 }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.path">/anf</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/query [GET]" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.path">/query</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
          <boolProp name="HTTPSampler.image_parser">false</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <boolProp name="HTTPSampler.md5">false</boolProp>
          <intProp name="HTTPSampler.ipSourceType">0</intProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
