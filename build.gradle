plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id "io.freefair.lombok" version "8.6"
}

group = 'cdx.opencdx'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "cdx.opencdx:opencdx-proto:latest.integration"

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "org.springframework:spring-webmvc"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"

    implementation "com.google.protobuf:protobuf-java:3.24.4"
    implementation "com.hubspot.jackson:jackson-datatype-protobuf:0.9.15"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.16.1"
// Swagger
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0"
    implementation 'io.swagger.core.v3:swagger-core-jakarta:2.2.22'

    runtimeOnly "org.postgresql:postgresql:42.7.3"
    testRuntimeOnly 'com.h2database:h2:2.1.210'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    
    //TINKAR
    implementation 'dev.ikm.tinkar:tinkar-core:1.67.0'
    implementation "dev.ikm.tinkar:entity:1.67.0"
    implementation "dev.ikm.tinkar:entity-provider:1.67.0"
    implementation "dev.ikm.tinkar:common:1.67.0"
    implementation "dev.ikm.tinkar:coordinate:1.67.0"
    implementation "dev.ikm.tinkar:data-spinedarray-provider:1.67.0"
    implementation "dev.ikm.tinkar:executor-provider:1.67.0"

}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// Project Level JaCoCo configuration
jacocoTestReport {
    dependsOn test
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/Application.class",
                    "cdx/**/grpc/*.class"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.0
            }
        }
    }
}


check.dependsOn jacocoTestCoverageVerification
